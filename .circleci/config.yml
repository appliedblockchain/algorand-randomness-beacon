version: 2.1

#Use commands to avoid steps code duplication
commands:
  build-vrf:
    steps:
      - run:
          name: build images
          command: docker-compose -f docker-compose.yml build vrf
      - run:
          name: Login to Dockerhub
          command: docker login -u abbuilder -p "$DOCKER_PASSWORD"
      - run:
          name: tag vrf image
          command: docker tag appliedblockchain/algorand-randomness-beacon-vrf:latest appliedblockchain/algorand-randomness-beacon-vrf:${CIRCLE_BRANCH}-${CIRCLE_SHA1}
      - run:
          name: Push vrf tagged image to Dockerhub
          command: docker push appliedblockchain/algorand-randomness-beacon-vrf:${CIRCLE_BRANCH}-${CIRCLE_SHA1}

  build-app:
    steps:
      - run:
          name: build images
          command: docker-compose -f docker-compose.yml build app
      - run:
          name: Login to Dockerhub
          command: docker login -u abbuilder -p "$DOCKER_PASSWORD"
      - run:
          name: tag app image
          command: docker tag appliedblockchain/algorand-randomness-beacon-app:latest appliedblockchain/algorand-randomness-beacon-app:${CIRCLE_BRANCH}-${CIRCLE_SHA1}
      - run:
          name: Push app tagged image to Dockerhub
          command: docker push appliedblockchain/algorand-randomness-beacon-app:${CIRCLE_BRANCH}-${CIRCLE_SHA1}

  deploy-kubernetes:
    steps:
      - run:
          name: Install AWS cli
          command: export TZ=Europe/London && sudo ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > sudo  /etc/timezone && sudo apt-get update && sudo apt-get install -y awscli
      #Need this hotfix by fixing the kubectl version as AWS changed how iam works.
      #In aws-iam-authenticator 0.5.5 AWS changed the way it behaves in 0.5.4 to require v1beta1.
      - run:
          name: Install kubectl
          #command: curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && sudo mv kubectl /usr/local/bin/ && chmod 755 /usr/local/bin/kubectl
          command: curl -LO "https://dl.k8s.io/release/v1.23.6/bin/linux/amd64/kubectl" && sudo mv kubectl /usr/local/bin/ && chmod 755 /usr/local/bin/kubectl
      - run:
          name: Get kubeconfig configuration
          command: aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $AWS_EKS_NAME
      - run:
          name: Apply General manifests
          command: |
            cd stack-eks
            kubectl apply -f app.namespace.yaml
            kubectl apply -f regcred.yaml
            kubectl apply -f regcred-app.yaml
      - run:
          name: Run script to apply Kubernetes secrets
          command: cd stack-eks && ./deploy-app-env-vars.sh
      - run:
          name: Apply vrf manifests
          command: |
            cd stack-eks/vrf
            /bin/sed -i "s/appliedblockchain\/algorand-randomness-beacon-vrf:latest/appliedblockchain\/algorand-randomness-beacon-vrf:${CIRCLE_BRANCH}-${CIRCLE_SHA1}/g" $MANIFESTS_PATH/vrf.daemonset.yaml
            kubectl apply -f $MANIFESTS_PATH/vrf.daemonset.yaml
            kubectl apply -f vrf.service.yaml
            kubectl -n app rollout restart daemonset/vrf
      - run:
          name: Apply app manifests
          command: |
            cd stack-eks/app
            /bin/sed -i "s/appliedblockchain\/algorand-randomness-beacon-app:latest/appliedblockchain\/algorand-randomness-beacon-app:${CIRCLE_BRANCH}-${CIRCLE_SHA1}/g" $MANIFESTS_PATH/app.daemonset.yaml
            kubectl apply -f $MANIFESTS_PATH/app.daemonset.yaml
            kubectl -n app rollout restart daemonset/app

jobs:
  test-vrf:
    docker:
      - image: cimg/node:lts
        environment:
          NODE_ENV: test
      - image: localstack/localstack:latest
        environment:
          - SERVICES=kms
          - DEFAULT_REGION=eu-west-2
          - KMS_PROVIDER=local-kms
    steps:
      - checkout
      - restore_cache:
          keys:
            - app-{{ checksum "services/vrf/package.json" }}
      - run:
          name: Install dependencies
          command: |-
            cd services/vrf
            npm i
      - save_cache:
          key: app-{{ checksum "services/vrf/package.json" }}
          paths:
            - services/vrf/node_modules
      - run:
          name: Test
          command: |
            cd services/vrf
            npm run test
      - store_test_results:
          path: services/vrf/reports/junit
      - store_artifacts:
          path: services/vrf/reports/coverage

  test-app:
    docker:
      - image: cimg/node:lts
        environment:
          NODE_ENV: test
    steps:
      - checkout
      - restore_cache:
          keys:
            - app-{{ checksum "services/app/package.json" }}
      - run:
          name: Install dependencies
          command: |-
            cd services/app
            npm i
      - save_cache:
          key: app-{{ checksum "services/app/package.json" }}
          paths:
            - services/app/node_modules
      - run:
          name: Test
          command: |
            cd services/app
            npm run test
      - store_test_results:
          path: services/app/reports/junit
      - store_artifacts:
          path: services/app/reports/coverage

  test-build:
    docker:
      - image: cimg/node:lts
        environment:
          NODE_ENV: test
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.2
      - run:
          name: Run docker build
          command: |-
            docker-compose -f docker-compose.yml build

  build-app-dev:
    docker:
      - image: cimg/node:lts
    environment:
          NODE_ENV: test
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.2
      - checkout
      - build-app

  build-vrf-dev:
    docker:
      - image: cimg/node:lts
    environment:
          NODE_ENV: test
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.2
      - checkout
      - build-vrf

  clean-dockerhub:
    docker:
      - image: cimg/node:lts
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.2
      - checkout
      - run:
          name: build images
          command: |
              echo "export DOCKER_PASSWORD=${DOCKER_PASSWORD}" >> ${BASH_ENV}
      - run:
          name: Execute clean script
          command: cd stack-eks && ./clean-dockerhub-images.sh

  deploy-dev:
    docker:
      - image: 'cimg/base:stable'
    environment:
      MANIFESTS_PATH: "dev"
    steps:
      - run:
          name: Set Pipeline Env Vars
          command: |
              echo "export AWS_ACCESS_KEY_ID=${DEV_AWS_ACCESS_KEY_ID}" >> ${BASH_ENV}
              echo "export AWS_SECRET_ACCESS_KEY=${DEV_AWS_SECRET_ACCESS_KEY}" >> ${BASH_ENV}
              echo "export AWS_DEFAULT_REGION=${DEV_AWS_REGION}" >> ${BASH_ENV}
              echo "export AWS_EKS_NAME=${DEV_AWS_EKS_NAME}" >> ${BASH_ENV}
              echo "export ALGOD_TOKEN=${DEV_ALGOD_TOKEN}" >> ${BASH_ENV}
              echo "export SERVICE_MNEMONIC=${DEV_SERVICE_MNEMONIC}" >> ${BASH_ENV}
              echo "export APP_AWS_SECRET_ACCESS_KEY=${DEV_APP_AWS_SECRET_ACCESS_KEY}" >> ${BASH_ENV}
              echo "export VRF_ENCRYPTED_KEY=${DEV_VRF_ENCRYPTED_KEY}" >> ${BASH_ENV}
      - checkout
      - deploy-kubernetes

workflows:
  build_test_deploy:
    jobs:
      - test-app
      - test-vrf

      ## Build Dev
      - build-vrf-dev:
          filters:
            branches:
              only: development #change to dev branch
          context:
            - org-global
          requires:
            - test-app
            - test-vrf
      
      - build-app-dev:
          filters:
            branches:
              only: development #change to dev branch
          context:
            - org-global
          requires:
            - test-app
            - test-vrf
      ## /Build Dev

      ## Deploy dev
      - deploy-dev:
          filters:
            branches:
              only: development #change to dev branch
          context:
            - org-global
          requires:
            - test-app
            - test-vrf
            - build-vrf-dev
            - build-app-dev
      ## /Deploy dev
